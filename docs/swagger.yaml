definitions:
  request.UserCreateRequest:
    properties:
      age:
        maximum: 140
        minimum: 1
        type: integer
      email:
        type: string
      name:
        maxLength: 100
        minLength: 4
        type: string
      password:
        minLength: 6
        type: string
    required:
    - age
    - email
    - name
    - password
    type: object
  request.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  request.UserUpdateRequest:
    properties:
      age:
        type: integer
      email:
        type: string
      name:
        type: string
    type: object
  response.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/response.LoginUserResponse'
    type: object
  response.LoginUserResponse:
    properties:
      age:
        type: integer
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  response.UserCreateResponse:
    description: Structure containing the required fields for return a user.
    properties:
      age:
        type: integer
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  rest_err.Causes:
    properties:
      field:
        type: string
      message:
        type: string
    type: object
  rest_err.RestErr:
    properties:
      causes:
        items:
          $ref: '#/definitions/rest_err.Causes'
        type: array
      code:
        type: integer
      error:
        type: string
      message:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8000
info:
  contact: {}
  description: API for crud operations on users
  title: Meu Primeiro CRUD em Go
  version: "1.0"
paths:
  /getUserByEmail/{email}:
    get:
      consumes:
      - application/json
      description: Retrieve a user's information by their ID
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserCreateResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - Bearer: []
      summary: Find a user by Email
      tags:
      - Users
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user with provided email and password
      parameters:
      - description: User login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/request.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Login
      tags:
      - Authentication
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided user information
      parameters:
      - description: User Data for create
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserCreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Retrieve a user's information by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: int
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - Bearer: []
      summary: User delete
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Retrieve a user's information by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserCreateResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - Bearer: []
      summary: Find a user by ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Retrieve a user's information by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Data for update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserCreateResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      security:
      - Bearer: []
      summary: User Updated
      tags:
      - Users
schemes:
- http
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
